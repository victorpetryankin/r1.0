////////////////////////////////////////////////////////////////////////////////
// Подсистема "Криптография".
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает список криптопровайдеров, поддерживаемых 1С-Отчетностью.
//
// Возвращаемое значение:
//	ФиксированныйМассив - массив с описаниями криптопровайдеров.
//  * Имя - Строка - имя криптопровайдера.
//  * Тип - Число  - тип криптопровайдера.
//  * Путь - Строка - путь к модулю криптопровайдера в nix-системах.
//  * Представление - Строка - представление криптопровайдера для отображение в интерфейсе.
//
Функция ПоддерживаемыеКриптопровайдеры() Экспорт
	
	СписокКриптопровайдеров = Новый Массив;
	СписокКриптопровайдеров.Добавить(КриптопровайдерCryptoPro());
	СписокКриптопровайдеров.Добавить(КриптопровайдерViPNet());
	
	Возврат Новый ФиксированныйМассив(СписокКриптопровайдеров);
	
КонецФункции

// Возвращает описание криптопровайдера CryptoPro CSP.
//
// Возвращаемое значение:
//	ФиксированнаяСтруктура - описание криптопровайдера.
//  * Имя - Строка - имя криптопровайдера.
//  * Тип - Число  - тип криптопровайдера.
//  * Путь - Строка - путь к модулю криптопровайдера в nix-системах.
//  * Представление - Строка - представление криптопровайдера для отображение в интерфейсе.
//
Функция КриптопровайдерCryptoPro() Экспорт
	
	Свойства = Новый Структура();
	Свойства.Вставить("Имя", 			"Crypto-Pro GOST R 34.10-2001 Cryptographic Service Provider");
	Свойства.Вставить("Путь", 			"");
	Свойства.Вставить("Тип", 			75);
	Свойства.Вставить("Представление", 	"CryptoPro CSP");
	
	Возврат Новый ФиксированнаяСтруктура(Свойства);
	
КонецФункции

// Возвращает описание криптопровайдера ViPNet CSP.
//
// Возвращаемое значение:
//	ФиксированнаяСтруктура - описание криптопровайдера.
//  * Имя - Строка - имя криптопровайдера.
//  * Тип - Число  - тип криптопровайдера.
//  * Путь - Строка - путь к модулю криптопровайдера в nix-системах.
//  * Представление - Строка - представление криптопровайдера для отображение в интерфейсе.
//
Функция КриптопровайдерViPNet() Экспорт
	
	Свойства = Новый Структура();
	Свойства.Вставить("Имя", 			"Infotecs Cryptographic Service Provider");
	Свойства.Вставить("Путь", 			"");
	Свойства.Вставить("Тип", 			2);
	Свойства.Вставить("Представление", 	"ViPNet CSP");
	
	Возврат Новый ФиксированнаяСтруктура(Свойства);
	
КонецФункции

// Возвращает описание криптопровайдера Signal-COM CSP.
//
// Возвращаемое значение:
//	ФиксированнаяСтруктура - описание криптопровайдера.
//  * Имя - Строка - имя криптопровайдера.
//  * Тип - Число  - тип криптопровайдера.
//  * Путь - Строка - путь к модулю криптопровайдера в nix-системах.
//  * Представление - Строка - представление криптопровайдера для отображение в интерфейсе.
//
Функция КриптопровайдерSignalCOM() Экспорт
	
	Свойства = Новый Структура();
	Свойства.Вставить("Имя", 			"Signal-COM CPGOST Cryptographic Provider");
	Свойства.Вставить("Путь", 			"");
	Свойства.Вставить("Тип", 			75);
	Свойства.Вставить("Представление", 	"Signal-COM CSP");
	
	Возврат Новый ФиксированнаяСтруктура(Свойства);
	
КонецФункции

// Возвращает описание криптопровайдера ЛИССИ-CSP.
//
// Возвращаемое значение:
//	ФиксированнаяСтруктура - описание криптопровайдера.
//  * Имя - Строка - имя криптопровайдера.
//  * Тип - Число  - тип криптопровайдера.
//  * Путь - Строка - путь к модулю криптопровайдера в nix-системах.
//  * Представление - Строка - представление криптопровайдера для отображение в интерфейсе.
//
Функция КриптопровайдерЛИССИ() Экспорт
	
	Свойства = Новый Структура();
	Свойства.Вставить("Имя", 			"LISSI-CSP");
	Свойства.Вставить("Путь", 			"");
	Свойства.Вставить("Тип", 			75);
	Свойства.Вставить("Представление", 	"ЛИССИ-CSP");
	
	Возврат Новый ФиксированнаяСтруктура(Свойства);
	
КонецФункции

// Возвращает описание криптопровайдера Microsoft Base Cryptographic Provider v1.0.
//
// Возвращаемое значение:
//	ФиксированнаяСтруктура - описание криптопровайдера.
//  * Имя - Строка - имя криптопровайдера.
//  * Тип - Число  - тип криптопровайдера.
//  * Путь - Строка - путь к модулю криптопровайдера в *nix-системах.
//  * Представление - Строка - представление криптопровайдера для отображение в интерфейсе.
//
Функция КриптопровайдерMicrosoftBaseCryptographicProvider() Экспорт
	
	Свойства = Новый Структура();
	Свойства.Вставить("Имя", 			"Microsoft Base Cryptographic Provider v1.0");
	Свойства.Вставить("Путь", 			"");
	Свойства.Вставить("Тип", 			1);
	Свойства.Вставить("Представление", 	"Microsoft Base Cryptographic Provider v1.0");
	
	Возврат Новый ФиксированнаяСтруктура(Свойства);
	
КонецФункции

// Возвращает описание криптопровайдера облачного криптопровайдера.
//
// Возвращаемое значение:
//	ФиксированнаяСтруктура - описание криптопровайдера.
//  * Имя - Строка - имя криптопровайдера.
//  * Тип - Число  - тип криптопровайдера.
//  * Путь - Строка - путь к модулю криптопровайдера в nix-системах.
//  * Представление - Строка - представление криптопровайдера для отображение в интерфейсе.
//
Функция КриптопровайдерОблачныйКриптопровайдер() Экспорт
	
	Свойства = Новый Структура();
	Свойства.Вставить("Имя", 			"Облачный криптопровайдер");
	Свойства.Вставить("Путь", 			"");
	Свойства.Вставить("Тип", 			0);
	Свойства.Вставить("Представление", 	"Облачный криптопровайдер");
	
	Возврат Новый ФиксированнаяСтруктура(Свойства);
	
КонецФункции

// Проверяем является ли переданный криптопровайдер поддерживаемым.
//
// Возвращаемое значение:
//	Криптопровайдер - Структура, ФиксированнаяСтруктура - описание криптопровайдера.
//  * Имя - Строка - имя криптопровайдера.
//  * Тип - Число  - тип криптопровайдера.
//
// Возвращаемое значение:
//	 Булево - признак поддержки переданного криптопровайдера.
//
Функция ЭтоПоддерживаемыйКриптопровайдер(Криптопровайдер) Экспорт
	
	Результат = Ложь;
	Для Каждого ПоддерживаемыйКриптопровайдер Из ПоддерживаемыеКриптопровайдеры() Цикл
		Если Криптопровайдер.Имя = ПоддерживаемыйКриптопровайдер.Имя И Криптопровайдер.Тип = ПоддерживаемыйКриптопровайдер.Тип Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Проверяет на равенство криптопровайдеру CryptoPro CSP.
//
// Параметры:
//  Криптопровайдер - Структура, ФиксированнаяСтруктура - описание криптопровайдера.
//  * Имя - Строка - имя криптопровайдера.
//  * Тип - Число  - тип криптопровайдера.
//
Функция ЭтоКриптопровайдерCryptoPro(Криптопровайдер) Экспорт

	Образец = КриптопровайдерCryptoPro();
	Возврат Криптопровайдер.Имя = Образец.Имя И Криптопровайдер.Тип = Образец.Тип;		
	
КонецФункции

// Проверяет на равенство криптопровайдеру ViPNet CSP.
//
// Параметры:
//  Криптопровайдер - Структура, ФиксированнаяСтруктура - описание криптопровайдера.
//  * Имя - Строка - имя криптопровайдера.
//  * Тип - Число  - тип криптопровайдера.
//
Функция ЭтоКриптопровайдерViPNet(Криптопровайдер) Экспорт

	Образец = КриптопровайдерViPNet();
	Возврат Криптопровайдер.Имя = Образец.Имя И Криптопровайдер.Тип = Образец.Тип;		
	
КонецФункции

// Проверяет на равенство криптопровайдеру Signal-COM CSP.
//
// Параметры:
//  Криптопровайдер - Структура, ФиксированнаяСтруктура - описание криптопровайдера.
//  * Имя - Строка - имя криптопровайдера.
//  * Тип - Число  - тип криптопровайдера.
//
Функция ЭтоКриптопровайдерSignalCOM(Криптопровайдер) Экспорт

	Образец = КриптопровайдерSignalCOM();
	Возврат Криптопровайдер.Имя = Образец.Имя И Криптопровайдер.Тип = Образец.Тип;		
	
КонецФункции

// Проверяет на равенство криптопровайдеру ЛИССИ-CSP.
//
// Параметры:
//  Криптопровайдер - Структура, ФиксированнаяСтруктура - описание криптопровайдера.
//  * Имя - Строка - имя криптопровайдера.
//  * Тип - Число  - тип криптопровайдера.
//
Функция ЭтоКриптопровайдерЛИССИ(Криптопровайдер) Экспорт

	Образец = КриптопровайдерЛИССИ();
	Возврат Криптопровайдер.Имя = Образец.Имя И Криптопровайдер.Тип = Образец.Тип;		
	
КонецФункции

// Проверяет на равенство облачному криптопровайдеру.
//
// Параметры:
//  Криптопровайдер - Структура, ФиксированнаяСтруктура - описание криптопровайдера.
//  * Имя - Строка - имя криптопровайдера.
//  * Тип - Число  - тип криптопровайдера.
//
Функция ЭтоКриптопровайдерОблачныйКриптопровайдер(Криптопровайдер) Экспорт

	Образец = КриптопровайдерОблачныйКриптопровайдер();
	Возврат Криптопровайдер.Имя = Образец.Имя И Криптопровайдер.Тип = Образец.Тип;		
	
КонецФункции

// Проверяет на равенство криптопровайдеру Microsoft Base Cryptographic Provider v1.0.
//
// Параметры:
//  Криптопровайдер - Структура, ФиксированнаяСтруктура - описание криптопровайдера.
//  * Имя - Строка - имя криптопровайдера.
//  * Тип - Число  - тип криптопровайдера.
//
Функция ЭтоКриптопровайдерMicrosoftBaseCryptographicProvider(Криптопровайдер) Экспорт

	Образец = КриптопровайдерMicrosoftBaseCryptographicProvider();
	Возврат Криптопровайдер.Имя = Образец.Имя И Криптопровайдер.Тип = Образец.Тип;		
	
КонецФункции

#Область Сертификаты

// Возвращает признак хранения сертификата в защищенном хранилище на сервере.
//
// Параметры:
//	Сертификат - Структура - Сведения о сертификате.
//
// Возвращаемое значение:
//	Булево - Истина, если сертификат хранииться в защищенном хранилище на сервере.
//
Функция СертификатВЗащищенномХранилищеНаСервере(Сертификат) Экспорт
	
	Возврат ЗначениеЗаполнено(Сертификат) 
			И (Сертификат.Свойство("ЭтоЭлектроннаяПодписьВМоделиСервиса") И Сертификат.ЭтоЭлектроннаяПодписьВМоделиСервиса = Истина
			ИЛИ Сертификат.Свойство("ЭлектроннаяПодписьВМоделиСервиса") И Сертификат.ЭлектроннаяПодписьВМоделиСервиса = Истина);
	
КонецФункции   

#КонецОбласти

#Область ОбработкаРезультатовВызова

// Возвращает описание результата выполнения действия.
//
// Параметры:
//	Выполнено - Булево - Истина, если действие выполнено успешно, иначе Ложь.
//	ИмяПоляРезультат - Строка, Неопределено - Имя поля со значением результата.
//	ЗначениеРезультат - Строка, Неопределено - Значение результата.
//	ВходящийКонтекст - Структура, Неопределено - Контекст выполнения.
//
// Возвращаемое значение:
//	Структура - Содержит как минимум ключ:
//		* Выполнено - Булево - признак выполнения.
//
Функция ПодготовитьРезультат(Выполнено, ИмяПоляРезультат = Неопределено, ЗначениеРезультат = Неопределено, ВходящийКонтекст = Неопределено) Экспорт
	
	Результат = Новый Структура("Выполнено", Выполнено);
	
	Если ВходящийКонтекст <> Неопределено Тогда
		Если ВходящийКонтекст.Свойство("МенеджерКриптографии") Тогда
			Результат.Вставить("МенеджерКриптографии", ВходящийКонтекст.МенеджерКриптографии);
		КонецЕсли;
		Если ВходящийКонтекст.Свойство("ДвоичныеДанные") Тогда
			Результат.Вставить("ДвоичныеДанные", ВходящийКонтекст.ДвоичныеДанные);
		КонецЕсли;
		Если ВходящийКонтекст.Свойство("ОписаниеОшибки") Тогда
			Результат.Вставить("ОписаниеОшибки", ВходящийКонтекст.ОписаниеОшибки);
		КонецЕсли;
		Если ВходящийКонтекст.Свойство("ИнформацияОбОшибке") И Не ВходящийКонтекст.Свойство("ОписаниеОшибки") Тогда
			Результат.Вставить("ОписаниеОшибки", КраткоеПредставлениеОшибкиКриптосервиса(ВходящийКонтекст.ИнформацияОбОшибке));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяПоляРезультат) Тогда
		Результат.Вставить(ИмяПоляРезультат, ЗначениеРезультат);
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Возвращает текстовое представление ошибки.
//
// Параметры:
//	ИнформацияОбОшибке - Строка, ИнформацияОбОшибке, Структура - Содержит информацию об ошибке.
//
// Возвращаемое значение:
//	Строка - Текстовое представление ошибки.
//
Функция КраткоеПредставлениеОшибкиКриптосервиса(Знач ИнформацияОбОшибке) Экспорт
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда 
		Возврат КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	ИначеЕсли ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") Тогда 
		Возврат ИнформацияОбОшибке;
	ИначеЕсли ТипЗнч(ИнформацияОбОшибке) = Тип("Структура") Тогда 
		Если ИнформацияОбОшибке.Свойство("ИнформацияОбОшибке") Тогда
			Возврат КраткоеПредставлениеОшибкиКриптосервиса(ИнформацияОбОшибке.ИнформацияОбОшибке);
		ИначеЕсли ИнформацияОбОшибке.Свойство("ОписаниеОшибки") Тогда
			Возврат ИнформацияОбОшибке.ОписаниеОшибки;
		КонецЕсли;		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Проверяет, является ли переданная строка адресом во временном хранилище.
//
// Параметры:
//	Адрес - Строка - Проверяемая строка.
//
// Возвращаемое значение:
//	Булево - Истина, если строка является адресом во временном хранилище.
//
Функция ЭтоАдресВоВременномХранилище(Адрес) Экспорт
	
	Если СтрНайти(Адрес, "e1cib/tempstorage/") = 1 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#Область ОписанияОшибок

// Возвращает описание ошибки, в случае, если не удалось проверить подпись.
//
Функция ОписаниеОшибкиНеУдалосьПроверитьПодпись() Экспорт

	Возврат НСтр("ru = 'Не удалось проверить подпись.'");
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПереместитьВоВременномХранилище(Знач ОткудаАдрес, Знач КудаАдрес, Знач ОчиститьИсходный = Ложь, Знач ПолучатьАдрес = Ложь) Экспорт
	
	Если Не ЭтоАдресВременногоХранилища(ОткудаАдрес) Или 
		Не ПолучатьАдрес И Не ЭтоАдресВременногоХранилища(КудаАдрес) Тогда 
		Возврат Ложь;
	КонецЕсли;
		
	ДанныеСодержимое = ПолучитьИзВременногоХранилища(ОткудаАдрес);
	Результат = ПоместитьВоВременноеХранилище(ДанныеСодержимое, КудаАдрес);
	
	Если ОчиститьИсходный Тогда 
		УдалитьИзВременногоХранилища(ОткудаАдрес);
	КонецЕсли;
	
	Возврат ?(ПолучатьАдрес, Результат, Истина);
	
КонецФункции

Процедура ЗаписатьСобытиеВЖурнал(Имя, Уровень = "Ошибка", Комментарий) Экспорт
	
	КриптографияЭДКОСлужебныйВызовСервера.ЗаписатьСобытиеВЖурнал(Имя, Уровень, Комментарий);
	
КонецПроцедуры

Функция ПроверитьПодписьPKCS7ВМоделиСервиса(ФайлПодписи, ФайлДанных) Экспорт
	
	ИзвлеченныеСертификаты = Неопределено;
	ИзвлеченныеПодписанты = Неопределено;
	КомментарийПоОшибке = "";
	ПодписьВалидна = КриптографияЭДКОСлужебныйВызовСервера.ПроверитьПодписьPKCS7(
		ФайлПодписи, ФайлДанных, ИзвлеченныеСертификаты, ИзвлеченныеПодписанты, КомментарийПоОшибке);
		
	Если НЕ ПодписьВалидна И ЗначениеЗаполнено(КомментарийПоОшибке) Тогда
		Результат = ПодготовитьРезультат(Ложь, "ОписаниеОшибки", КомментарийПоОшибке);
	Иначе
		Результат = ПодготовитьРезультат(Истина, "ПодписьВалидна", ПодписьВалидна);
		Результат.Вставить("Подписанты", ИзвлеченныеПодписанты);
		Для ИндексПодписанта = 0 По Результат.Подписанты.Количество() - 1 Цикл
			Результат.Подписанты[ИндексПодписанта] = Новый ФиксированнаяСтруктура(Результат.Подписанты[ИндексПодписанта]);
		КонецЦикла;
		Результат.Подписанты = Новый ФиксированныйМассив(Результат.Подписанты);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти


